// Generated by CoffeeScript 2.5.1
(function() {
  var git, gitmodule, globalScope, log;

  gitmodule = {
    name: "gitmodule"
  };

  //region modulesFromEnvironment
  //region node_modules
  git = require("simple-git/promise");

  //endregion

  //region localModules
  globalScope = null;

  //endregion
  //endregion

  //region logPrintFunctions
  //#############################################################################
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["gitmodule"] != null) {
      console.log("[gitmodule]: " + arg);
    }
  };

  //endregion
  //#############################################################################
  gitmodule.initialize = function() {
    log("gitmodule.initialize");
    globalScope = allModules.globalscopemodule;
  };

  
  //region internalFunctions
  //endregion

  //region exposedFunctions
  gitmodule.addSubmodule = async function(base, remote, label) {
    var url;
    log("gitmodule.addSubmodule");
    url = remote.getSSH();
    if (!url || !globalScope.repoIsInScope(remote.getRepo())) {
      url = remote.getHTTPS();
    }
    await git(base).submoduleAdd(url, label);
  };

  gitmodule.push = async function(base) {
    log("gitmodule.push");
    await git(base).push("origin", "master");
  };

  gitmodule.addAll = async function(base) {
    log("gitmodule.addAll");
    await git(base).add(".");
  };

  gitmodule.init = async function(base, remote) {
    log("gitmodule.init");
    await git(base).init();
    await git(base).addRemote("origin", remote.getSSH());
  };

  gitmodule.addPush = async function(base, remote) {
    log("gitmodule.addPush");
    await gitmodule.addAll(base);
    await git(base).commit("initial commit");
    await gitmodule.push(base);
  };

  gitmodule.initPush = async function(base, remote) {
    log("gitmodule.initAndPush");
    await gitmodule.init(base, remote);
    await gitmodule.addAll(base);
    await git(base).commit("initial commit");
    await gitmodule.push(base);
  };

  gitmodule.clone = async function(remote, base) {
    var url;
    log("gitmodule.clone");
    url = remote.getSSH();
    if (!url || !globalScope.repoIsInScope(remote.getRepo())) {
      url = remote.getHTTPS();
    }
    if (!url) {
      throw "No URL to clone available for RemoteObject!";
    }
    await git(base).clone(url);
  };

  //endregion
  module.exports = gitmodule;

}).call(this);
